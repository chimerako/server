user root;
worker_processes  auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;
events {
    worker_connections  10000;
}

rtmp {
    server {
        listen 1935; # Listen on standard RTMP port
        chunk_size 4000;

        # This application is to accept incoming stream
        application stream {
                live on; # Allows live input from above
                record all;
                # This does not need to be publicly accessible since we'll convert and publish the files later
                record_path /home/chimerako/replay;
                record_suffix _%Y-%m-%d_%H-%M-%S.mp4;
                record_lock on;

                # ADAPTIVE BITRATE SUPPORT
                # Once the stream is alive, transcode for adaptive streaming
                # This single ffmpeg command takes the input and transforms
                # the source into 4 different streams with different bitrate
                # and quality. The scaling done here respects the aspect
                # ratio of the input.

                # This is commented by default as it is CPU and RAM intensive
                # If you opt to enable it, ensure you have sufficient resources.

                exec_push ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
                        #-c copy -f flv rtmp://localhost/record/$name_src
                        -c:v libx264 -b:v 256k -c:a copy -vf "scale=360:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/live/$name_low
                        -c:v libx264 -b:v 768k -c:a copy -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/live/$name_mid
                        -c:v libx264 -b:v 1024k -c:a copy -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/live/$name_high
                        #-c:v libx264 -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/live/$name_hd720
                        -c copy -f flv rtmp://localhost/live/$name_src;
#                        -c copy -f flv rtmp://localhost/record/$name_record;
          }
                #dash on;
                #dash_path /var/tmp/dashme;

         application live {
                 live on;
                hls on; # Enable HTTP Live Streaming
                # Instruct clients to adjust resolution according to bandwidth
                hls_variant _low BANDWIDTH=288000 RESOLUTION=640x360; # Low bitrate, sub-SD resolution
                hls_variant _mid BANDWIDTH=448000 RESOLUTION=854x480; # Medium bitrate, SD resolution
                hls_variant _high BANDWIDTH=1152000 RESOLUTION=1280x720; # High bitrate, higher-than-SD resolution
                hls_variant _src BANDWIDTH=2048000 RESOLUTION=1920x1080; # High bitrate, HD 720p resolution
                #hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution

                #hls_cleanup on;
                hls_nested on;
                hls_fragment_naming system;
                hls_sync 100ms;
                hls_fragment 6;
                hls_playlist_length 20;
                hls_path /mnt/ramdisk/hls/;

          #}

          #application record {
               # live on;
                # Enable recording archived files of each stream
                #record all;
                # This does not need to be publicly accessible since we'll convert and publish the files later
                #record_path /mnt/ramdisk/rec;
                #record_suffix _%Y-%m-%d_%H-%M-%S.mp4;
                #record_lock on;

                # Define the two scripts that will run when recording starts and when it finishes
#                exec_publish /opt/kaltura/bin/create_live_entry.php $args;
#                exec_record_done /opt/kaltura/bin/upload_live_recording.php $args $path;


        }
    }
}

http {
    sendfile off;
    tcp_nopush on;
    directio 512;
    default_type application/octet-stream;
    server_tokens off;
    include mime.types;
    keepalive_timeout 65;
    #gzip on;
    
    server {
        listen 443 ssl http2;
        server_name live.chimerako.com;
        ssl_certificate /etc/nginx/ssl/live.chimerako.com/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live.chimerako.com/key.pem;
        #aio on;
        root /mnt/ramdisk;

        location / {
            add_header Cache-Control no-cache;
#             add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Origin' 'https://pbarecap.ph' always;
#            add_header 'Access-Control-Allow-Origin' 'https://test.pbarecap.ph' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            if ($request_method = 'OPTIONS') {
            #     add_header 'Access-Control-Allow-Origin' '*' ;
                add_header 'Access-Control-Allow-Origin' 'https://pbarecap.ph';
                add_header 'Access-Control-Allow-Origin' 'https://test.pbarecap.ph';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            types {
                application/dash+xml mpd;
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
        }

      #  location ~ ^/hls/.+\.m3u8$ {

            #set $secret "my-hotlink-secret-cmedrano18";

#           add_header 'Access-Control-Allow-Origin' 'https://pbarecap.ph' always;
            #add_header 'Access-Control-Allow-Origin' '*' always;
 #       add_header 'Access-Control-Expose-Headers' 'Content-Length';
#           if ($expected_digest != $arg_digest) {
#               return 402;
#          }
#       }
    }
}
